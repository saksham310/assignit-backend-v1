generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define Enum for Workspace Roles
enum Workspace_Roles {
  Admin
  Owner
  Member
}

enum Priority {
  Low
  Medium
  High
}

enum Project_Roles {
  Project_Manager
  Team_Lead
  Developer
  QA
  Designer
  Database
  Unassigned
}

enum Status_Types {
  To_Do
  In_Progress
  Completed
}

enum Comment_Types {
  comment
  activity
}

model User {
  id           Int              @id @default(autoincrement())
  email        String           @unique
  password     String
  username     String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  otp          String?
  otp_expiry   DateTime?
  imageUrl     String?
  avatarColor  String?
  workspaces   Workspace_User[] @relation("WorkspaceUser")
  projects     Project_User[]   @relation("ProjectUser")
  Task_User    Task_User[]      @relation("TaskUser")
  Task_Comment Task_Comment[]   @relation("UserComment")
}

model Workspace {
  id         Int              @id @default(autoincrement())
  name       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  users      Workspace_User[] @relation("WorkspaceUser")
  inviteCode String           @unique
  projects   Project[]        @relation("WorkspaceProjects")
}

model Workspace_User {
  id           Int             @id @default(autoincrement())
  user         User            @relation("WorkspaceUser", fields: [user_id], references: [id])
  user_id      Int
  workspace    Workspace       @relation("WorkspaceUser", fields: [workspace_id], references: [id])
  workspace_id Int
  role         Workspace_Roles @default(Member)
  joinDate     DateTime        @default(now())

  @@unique([workspace_id, user_id])
}

model Project {
  id           Int            @id @default(autoincrement())
  name         String
  startDate    DateTime
  updatedAt    DateTime       @updatedAt
  dueDate      DateTime
  users        Project_User[] @relation("ProjectUser")
  workspace    Workspace      @relation("WorkspaceProjects", fields: [workspace_id], references: [id])
  workspace_id Int
  status       Status[]       @relation("ProjectStatus")
  sprint       Sprint[]       @relation("ProjectSprint")
}

model Project_User {
  id         Int           @id @default(autoincrement())
  user       User          @relation("ProjectUser", fields: [user_id], references: [id])
  user_id    Int
  project    Project       @relation("ProjectUser", fields: [project_id], references: [id])
  project_id Int
  role       Project_Roles @default(Unassigned)
  joinDate   DateTime      @default(now())

  @@unique([project_id, user_id])
}

model Status {
  id         Int          @id @default(autoincrement())
  name       String
  type       Status_Types
  color      String?
  project    Project      @relation("ProjectStatus", fields: [project_id], references: [id])
  project_id Int
  Tasks      Tasks[]      @relation("TaskStatus")
}

model Sprint {
  id              Int               @id @default(autoincrement())
  name            String
  project         Project           @relation("ProjectSprint", fields: [project_id], references: [id])
  project_id      Int
  startDate       DateTime
  endDate         DateTime
  Tasks           Tasks[]           @relation("SprintTask")
  Sprint_Feedback Sprint_Feedback[] @relation("SprintFeedback")
}

model Tasks {
  id               Int         @id @default(autoincrement())
  name             String
  description      String      @db.Text
  sprint_id        Int
  sprint           Sprint      @relation("SprintTask", fields: [sprint_id], references: [id])
  status_id        Int
  status           Status      @relation("TaskStatus", fields: [status_id], references: [id])
  Task_User        Task_User[] @relation("TaskUser")
  priority         Priority    @default(Medium)
  frontendBugCount Int         @default(0)
  backendBugCount  Int         @default(0)
  databaseBugCount Int         @default(0)

  Task_Comment Task_Comment[] @relation("TaskComment")
}

model Task_User {
  id      Int   @id @default(autoincrement())
  user    User  @relation("TaskUser", fields: [user_id], references: [id])
  user_id Int
  task    Tasks @relation("TaskUser", fields: [task_id], references: [id])
  task_id Int

  @@unique([task_id, user_id])
}

model Task_Comment {
  id         Int           @id @default(autoincrement())
  user       User          @relation("UserComment", fields: [user_id], references: [id])
  user_id    Int
  task       Tasks         @relation("TaskComment", fields: [task_id], references: [id])
  task_id    Int
  message    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  type       Comment_Types
  attachment String?
}

model Sprint_Feedback {
  id          Int    @id @default(autoincrement())
  sprint_id   Int
  sprint      Sprint @relation("SprintFeedback", fields: [sprint_id], references: [id])
  wentWell    String
  toImprove   String
  actionItems String
}
